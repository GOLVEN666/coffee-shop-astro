---
import '../styles/global.css';
import BaseLayout from '../layouts/BaseLayout.astro';
import Header from '../components/Header.astro';
import Products from '../components/Products.astro';
import NewProducts from '../components/NewProducts.astro';
import { products, newProducts } from '../components/ImageGallery.astro';

const categories = ['All', 'Espresso', 'Latte', 'Cappuccino', 'Cold Brew', 'Tea'];
const roastLevels = ['Light', 'Medium', 'Dark'];
const origins = ['Ethiopia', 'Colombia', 'Brazil', 'Kenya', 'Guatemala'];
---

<BaseLayout>
    <Header />
    <div class="shop-layout container">
        <div class="filter-sidebar">
            <h3>Filter Options</h3>
            
            <div class="filter-section">
                <h4>Categories</h4>
                <ul>
                    {categories.map(category => (
                        <li>
                            <label>
                                <input type="checkbox" name="category" value={category}>
                                {category}
                            </label>
                        </li>
                    ))}
                </ul>
            </div>

            <div class="filter-section">
                <h4>Roast Level</h4>
                <ul>
                    {roastLevels.map(level => (
                        <li>
                            <label>
                                <input type="checkbox" name="roast" value={level}>
                                {level}
                            </label>
                        </li>
                    ))}
                </ul>
            </div>

            <div class="filter-section">
                <h4>Origin</h4>
                <ul>
                    {origins.map(origin => (
                        <li>
                            <label>
                                <input type="checkbox" name="origin" value={origin}>
                                {origin}
                            </label>
                        </li>
                    ))}
                </ul>
            </div>

            <div class="price-range">
                <h4>Price Range</h4>
                <input type="range" min="0" max="100" value="50" class="slider" id="priceRange">
                <div class="price-labels">
                    <span>$0</span>
                    <span>$100</span>
                </div>
            </div>

            <button class="btn apply-filters">
                <span>Apply Filters</span>
                <div class="liquid"></div>
            </button>
        </div>
        <div class="product-content">
            <Products products={products} />
            <NewProducts newProducts={newProducts} />
        </div>
    </div>
</BaseLayout>

<style>
    .shop-layout {
        display: flex;
        margin-top: 80px; /* Adjust based on your header height */
    }

    .filter-sidebar {
        flex: 0 0 250px;
        background-color: rgba(255, 255, 255, 0.05);
        border-radius: 10px;
        padding: 1.5rem;
        margin-right: 2rem;
    }

    .filter-sidebar h3 {
        font-family: 'Playfair Display', serif;
        font-size: 1.8rem;
        margin-bottom: 1.5rem;
        color: var(--primary-color);
    }

    .filter-section {
        margin-bottom: 1.5rem;
    }

    .filter-section h4 {
        font-size: 1.2rem;
        margin-bottom: 0.5rem;
    }

    .filter-section ul {
        list-style: none;
        padding: 0;
    }

    .filter-section li {
        margin-bottom: 0.5rem;
    }

    .filter-section label {
        display: flex;
        align-items: center;
        cursor: pointer;
    }

    .filter-section input[type="checkbox"] {
        margin-right: 0.5rem;
    }

    .price-range {
        margin-bottom: 1.5rem;
    }

    .slider {
        width: 100%;
        -webkit-appearance: none;
        height: 5px;
        border-radius: 5px;
        background: #d3d3d3;
        outline: none;
        opacity: 0.7;
        transition: opacity .2s;
    }

    .slider:hover {
        opacity: 1;
    }

    .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background: var(--primary-color);
        cursor: pointer;
    }

    .slider::-moz-range-thumb {
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background: var(--primary-color);
        cursor: pointer;
    }

    .price-labels {
        display: flex;
        justify-content: space-between;
        margin-top: 0.5rem;
    }

    .apply-filters {
        width: 100%;
        margin-top: 1rem;
    }

    .product-content {
        flex: 1;
    }
</style>

<script define:vars={{ products, newProducts }} >
    document.addEventListener("DOMContentLoaded", () => {
        if (typeof AOS !== 'undefined') {
            AOS.init({
                duration: 1200,
            });
        }

        const createProductElement = (product, index) => {
            const productElement = document.createElement("div");
            productElement.classList.add("product");
            productElement.setAttribute("data-aos", "fade-up");
            productElement.setAttribute("data-aos-delay", index * 100);
            productElement.innerHTML = `
                <img class="coffeeimg" src="${product.image}" alt="${product.name}">
                <div class="product-info">
                    <h3 class="product-title">${product.name}</h3>
                    <p class="product-price">${product.price}</p>
                    <button class="order-now">Order Now</button>
                </div>
            `;
            return productElement;
        };

        const productGrid = document.getElementById("product-list");
        if (productGrid) {
            products.forEach((product, index) => productGrid.appendChild(createProductElement(product, index)));
        }

        const newProductGrid = document.getElementById("new-product-list");
        if (newProductGrid) {
            newProducts.forEach((product, index) => newProductGrid.appendChild(createProductElement(product, index)));
        }
    });

    window.addEventListener('load', () => {
        setTimeout(() => {
            const loadingOverlay = document.getElementById('loading-overlay');
            if (loadingOverlay) {
                loadingOverlay.style.opacity = '0';
                setTimeout(() => {
                    loadingOverlay.style.display = 'none';
                }, 500);
            }
        }, 1500);
    });

    window.addEventListener('scroll', () => {
        const header = document.querySelector('header');
        if (header) {
            header.classList.toggle('scrolled', window.scrollY > 50);
        }
    });

    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth'
                });
            }
        });
    });

    const burger = document.querySelector('.burger');
    if (burger) {
        burger.addEventListener('click', () => {
            const navLinks = document.querySelector('.nav-links');
            if (navLinks) {
                navLinks.classList.toggle('nav-active');
                document.querySelectorAll('.burger div').forEach((line, index) => {
                    if (navLinks.classList.contains('nav-active')) {
                        // Apply transformations to make the burger icon an "X"
                        if (index === 0) {
                            line.style.transform = 'rotate(45deg) translate(50%, 50%)';
                        } else if (index === 1) {
                            line.style.opacity = '0'; // Middle line disappears
                        } else if (index === 2) {
                            line.style.transform = 'rotate(-45deg) translate(50%, -50%)';
                        }
                        line.classList.add('active');
                    } else {
                        // Revert to the initial burger icon state
                        line.style.transform = '';
                        line.style.opacity = '1';
                        line.classList.remove('active');
                    }
                });
            }
        });
    }

    if ('DeviceOrientationEvent' in window) {
        window.addEventListener('deviceorientation', function(event) {
            const alpha = event.alpha;
            const beta = event.beta;
            const gamma = event.gamma;
            const rotateDeg = `rotateZ(${alpha}deg) rotateX(${beta}deg) rotateY(${gamma}deg)`;
            document.querySelectorAll('.liquid').forEach(liquid => {
                liquid.style.transform = rotateDeg;
            });
        }, true);
    } else {
        console.log('DeviceOrientationEvent is not supported');
    }

</script>